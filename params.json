{"name":"Star","tagline":"Test program for network policies.","body":"# star ![Build Status](https://travis-ci.org/mesosphere/star.svg?branch=master)\r\n\r\nStar builds two executable programs: _star-probe_ and _star-collect_.\r\n\r\n_star-probe_ polls for reachability between endpoints\r\nin a network, exposing the results as a REST resource.\r\n\r\n_star-collect_ fetches resources over HTTP and caches them for\r\nretrieval.  It exposes the cached results as a REST resource.  In\r\naddition, resources can be added and removed via the REST API.\r\n\r\nThe _star-collect_ program also has a web UI for visualizing probe\r\nstatus.\r\n\r\n<img src=\"https://raw.githubusercontent.com/mesosphere/star/master/examples/frontend/star-graph.png\" width=\"600\" />\r\n\r\nTo load some sample data into the visualizer, simply add the `?example=true`\r\nquery parameter to the URL when loading the index in your browser.\r\n\r\n## Star Probe\r\n\r\n### Synopsis\r\n\r\n```\r\n   _____ _____ ___  ______\r\n  /  ___|_   _/ _ \\ | ___ \\\r\n  \\ `--.  | |/ /_\\ \\| |_/ /\r\n   `--. \\ | ||  _  ||    /\r\n  /\\__/ / | || | | || |\\ \\\r\n  \\____/  \\_/\\_| |_/\\_| \\_|\r\n\r\nstar-probe - Test program for network policies.\r\n\r\nThis program periodically attempts to connect to each configured target URL and\r\nsaves state about which ones are reachable.  It provides a REST API for\r\nquerying the most recent reachability data for its target set.\r\n\r\nUsage:\r\n    star-probe --help\r\n    star-probe --urls=<urls> [--http-address=<address> --http-port=<port> --http-probe-seconds=<seconds> --logfile=<path>]\r\n\r\nOptions:\r\n    --help                          Show this help message.\r\n    --http-address=<address>        Address to listen on for HTTP requests\r\n                                    [default: 0.0.0.0].\r\n    --http-port=<port>              Port to listen on for HTTP requests\r\n                                    [default: 9000].\r\n    --http-probe-seconds=<seconds>  Seconds between probe connection attempts\r\n                                    [default: 5].\r\n    --urls=<urls>                   List of comma-delimited URLs to probe, e.g:\r\n                                    foo.baz.com:80,bar.baz.com:80\r\n    --logfile=<path>                File to log output to instead of stdout.\r\n```\r\n\r\n### REST API\r\n\r\n**GET /status**: Get reachability status of configured target URLs.\r\n\r\n```http\r\nGET /status HTTP/1.1\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate\r\nHost: localhost:9000\r\n```\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\nDate: Thu, 11 Jun 2015 23:38:11 GMT\r\nTransfer-Encoding: chunked\r\n\r\n{\r\n    \"status\": {\r\n        \"targets\": [\r\n            {\r\n                \"reachable\": true,\r\n                \"url\": \"http://127.0.0.1:9000\"\r\n            },\r\n            {\r\n                \"reachable\": false,\r\n                \"url\": \"http://127.0.0.1:9001\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n## Star Collect\r\n\r\n### Synopsis\r\n\r\n```\r\n   _____ _____ ___  ______\r\n  /  ___|_   _/ _ \\ | ___ \\\r\n  \\ `--.  | |/ /_\\ \\| |_/ /\r\n   `--. \\ | ||  _  ||    /\r\n  /\\__/ / | || | | || |\\ \\\r\n  \\____/  \\_/\\_| |_/\\_| \\_|\r\n\r\nstar-collect - Test program for network policies.\r\n\r\nThis program periodically fetches each configured HTTP resource and\r\nsaves state about the responses.  It provides a REST API for\r\nquerying the most recent responses data for its target resource set\r\nas well as modifying the set of target resources.\r\n\r\nUsage:\r\n    star-collect --help\r\n    star-collect [--http-address=<address> --http-port=<port> --http-request-seconds=<seconds> --resources-file=<path> --logfile=<path>]\r\n\r\nOptions:\r\n    --help                            Show this help message.\r\n    --http-address=<address>          Address to listen on for HTTP requests\r\n                                      [default: 0.0.0.0].\r\n    --http-port=<port>                Port to listen on for HTTP requests\r\n                                      [default: 9001].\r\n    --http-request-seconds=<seconds>  Seconds between resource fetch attempts\r\n                                      [default: 5].\r\n    --logfile=<path>                  File to log output to instead of stdout.\r\n    --resources-file=<path>           Path to file containing initial resources\r\n                                      as a JSON array.\r\n```\r\n\r\n_Example initial resources file:_\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": \"A\",\r\n    \"url\": \"http://a/status\"\r\n  },\r\n  {\r\n    \"id\": \"B\",\r\n    \"url\": \"http://b/status\"\r\n  },\r\n  {\r\n    \"id\": \"C\",\r\n    \"url\": \"http://c/status\"\r\n  }\r\n]\r\n```\r\n\r\n### REST API\r\n\r\n**POST /resources**\r\n\r\n```http\r\nHTTP/1.1 201 CREATED\r\nContent-Type: application/json; charset=utf-8\r\n\r\n{\r\n    \"resource\": {\r\n        \"id\": \"A\",\r\n        \"url\": \"http://a/status\"\r\n    }\r\n}\r\n```\r\n\r\n**GET /resources**\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\n\r\n{\r\n    \"resources\": [\r\n        {\r\n            \"id\": \"A\",\r\n            \"url\": \"http://a/status\"\r\n        },\r\n        {\r\n            \"id\": \"B\",\r\n            \"url\": \"http://b/status\"\r\n        },\r\n    ]\r\n}\r\n```\r\n\r\n**GET /resources/{id}**\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\n\r\n{\r\n    \"resource\": {\r\n        \"id\": \"A\",\r\n        \"url\": \"http://a/status\"\r\n    }\r\n}\r\n```\r\n\r\n**GET /responses**\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\n\r\n{\r\n    \"responses\": {\r\n        \"A\": {\r\n            \"url\": \"http://a/status\",\r\n            \"statusCode\": 200,\r\n            \"json\": {\r\n                \"targets\": [\r\n                    {\r\n                        \"reachable\": true,\r\n                        \"url\": \"http://b/status\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"B\": {\r\n            \"url\": \"http://b/status\",\r\n            \"statusCode\": 200,\r\n            \"json\": {\r\n                \"targets\": [\r\n                    {\r\n                        \"reachable\": false,\r\n                        \"url\": \"http://a/status\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**GET /responses/{id}**\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\n\r\n{\r\n    \"response\": {\r\n        \"A\": {\r\n            \"url\": \"http://a/status\",\r\n            \"statusCode\": 200,\r\n            \"json\": {\r\n                \"targets\": [\r\n                    {\r\n                        \"reachable\": true,\r\n                        \"url\": \"http://b/status\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Combining star-probe and star-collector\r\n\r\nWith `star-probe` listening locally on port 9000 and `star-collect`\r\nlistening locally on port 9001:\r\n\r\n_Add the probe to the collector's resource list:_\r\n\r\n**Request**\r\n\r\n```http\r\nPOST /resources HTTP/1.1\r\nAccept: application/json\r\nAccept-Encoding: gzip, deflate\r\nConnection: keep-alive\r\nContent-Length: 57\r\nContent-Type: application/json\r\nHost: localhost:9001\r\n\r\n{\r\n    \"id\": \"probe-1\",\r\n    \"url\": \"http://127.0.0.1:9000/status\"\r\n}\r\n```\r\n\r\n**Response**\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\nDate: Mon, 27 Jul 2015 23:30:02 GMT\r\nTransfer-Encoding: chunked\r\n\r\n{\r\n    \"id\": \"probe-1\",\r\n    \"url\": \"http://127.0.0.1:9000/status\"\r\n}\r\n```\r\n\r\n_Query the collector for cached responses:_\r\n\r\n```http\r\nGET /responses HTTP/1.1\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate\r\nConnection: keep-alive\r\nHost: localhost:9001\r\n```\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\nDate: Mon, 27 Jul 2015 23:33:21 GMT\r\nTransfer-Encoding: chunked\r\n\r\n{\r\n    \"responses\": {\r\n        \"probe-1\": {\r\n            \"json\": {\r\n                \"status\": {\r\n                    \"targets\": [\r\n                        {\r\n                            \"reachable\": true,\r\n                            \"url\": \"http://127.0.0.1:9000/status\"\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            \"statusCode\": 200,\r\n            \"url\": \"http://127.0.0.1:9000/status\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Build (with [Cargo](http://doc.crates.io))\r\n\r\n_This program depends on Rust version 1.1._\r\n\r\nCompile and link:\r\n\r\n```shell\r\n$ cargo build\r\n```\r\n\r\nYou can run the build result directly from Cargo, too:\r\n\r\n```shell\r\n$ cargo run --bin star-probe -- --urls=http://127.0.0.1:9000\r\n```\r\n\r\nGenerate and view the docs:\r\n\r\n```shell\r\n$ cargo doc\r\n$ open target/doc/star/index.html\r\n```\r\n\r\n## Build with [Docker](http://www.docker.com)\r\n\r\nBuild and tag an image in your local registry:\r\n\r\n```shell\r\n$ docker build -t mesosphere/star .\r\n```\r\n\r\nRun the image:\r\n\r\n```shell\r\n$ docker run --net=host -t mesosphere/star --urls=http://localhost:9000\r\n```\r\n\r\nVerify it's running properly by checking the status endpoint:\r\n\r\n```shell\r\n$ curl -X GET http://localhost:9000/status\r\n```\r\n\r\nOr if you're using **boot2docker**:\r\n\r\n```shell\r\n$ curl -X GET http://$(boot2docker ip):9000/status\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}